import './style.css'
import { BlockBuilder } from 'block-builder'

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–ª–æ–∫–æ–≤
const blockConfigs = {
  text: {
    title: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
    icon: 'üìù',
    description: '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
    render: {
      kind: 'html',
      template: (props) => `
        <div class="text-block" style="padding: 1rem; background: white; border-radius: 4px; margin-bottom: 1rem;">
          <p style="font-size: ${props.fontSize || 16}px; color: ${props.color || '#333'};">
            ${props.content || '–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç'}
          </p>
        </div>
      `
    },
    fields: [
      {
        field: 'content',
        label: '–¢–µ–∫—Å—Ç',
        type: 'textarea',
        defaultValue: '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫'
      },
      {
        field: 'fontSize',
        label: '–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞',
        type: 'number',
        defaultValue: 16
      },
      {
        field: 'color',
        label: '–¶–≤–µ—Ç',
        type: 'color',
        defaultValue: '#333333'
      }
    ]
  },
  image: {
    title: '–ë–ª–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    icon: 'üñºÔ∏è',
    description: '–ü—Ä–æ—Å—Ç–æ–π –±–ª–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
    render: {
      kind: 'html',
      template: (props) => `
        <div class="image-block" style="padding: 1rem; background: white; border-radius: 4px; margin-bottom: 1rem; text-align: center;">
          <img src="${props.src || '/1.jpeg'}" 
               alt="${props.alt || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}" 
               style="max-width: 100%; border-radius: 4px;" />
        </div>
      `
    },
    fields: [
      {
        field: 'src',
        label: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        type: 'text',
        defaultValue: '/1.jpeg'
      },
      {
        field: 'alt',
        label: '–û–ø–∏—Å–∞–Ω–∏–µ',
        type: 'text',
        defaultValue: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
      }
    ]
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏–∑ localStorage
const loadSavedBlocks = () => {
  try {
    const savedData = localStorage.getItem('saved-blocks')
    if (savedData) {
      const blocks = JSON.parse(savedData)
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${blocks.length} —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤`)
      return blocks
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤:', error)
  }
  return []
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BlockBuilder –ë–ï–ó –≥–æ—Ç–æ–≤–æ–≥–æ UI
// –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π API
const blockBuilder = new BlockBuilder({
  containerId: 'hidden-container', // –°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  blockConfigs: blockConfigs,
  autoRender: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π UI
  initialBlocks: loadSavedBlocks() // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –±–ª–æ–∫–∏
})

console.log('‚úÖ BlockBuilder API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π API, –±–µ–∑ –≥–æ—Ç–æ–≤–æ–≥–æ UI')

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const addTextBtn = document.getElementById('addTextBlock')
const addImageBtn = document.getElementById('addImageBlock')
const saveBlocksBtn = document.getElementById('saveBlocks')
const getAllBlocksBtn = document.getElementById('getAllBlocks')
const clearBlocksBtn = document.getElementById('clearBlocks')
const blocksJsonEl = document.getElementById('blocksJson')
const blocksContainerEl = document.getElementById('blocksContainer')

// –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
let blockCounter = 0

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function updateDisplay() {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —á–µ—Ä–µ–∑ API
  const blocks = await blockBuilder.getAllBlocks()
  
  // –û–±–Ω–æ–≤–ª—è–µ–º JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
  blocksJsonEl.textContent = JSON.stringify(blocks, null, 2)
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
  blocksContainerEl.innerHTML = blocks.length === 0 
    ? '<p style="color: #999; text-align: center; padding: 2rem;">–ë–ª–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>'
    : ''
  
  blocks.forEach(block => {
    const blockEl = document.createElement('div')
    blockEl.className = 'block-item'
    blockEl.innerHTML = `
      <div class="block-actions">
        <button class="btn btn-secondary btn-sm" onclick="editBlock('${block.id}')">–ò–∑–º–µ–Ω–∏—Ç—å</button>
        <button class="btn btn-danger btn-sm" onclick="deleteBlock('${block.id}')">–£–¥–∞–ª–∏—Ç—å</button>
      </div>
      <strong>${block.type}</strong> (ID: ${block.id})<br>
      <small>Props: ${JSON.stringify(block.props).substring(0, 100)}...</small>
    `
    blocksContainerEl.appendChild(blockEl)
  })
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ —á–µ—Ä–µ–∑ API
addTextBtn.addEventListener('click', async () => {
  blockCounter++
  
  const newBlock = await blockBuilder.createBlock({
    type: 'text',
    settings: {},
    props: {
      content: `–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ #${blockCounter}`,
      fontSize: 16 + Math.floor(Math.random() * 16),
      color: `#${Math.floor(Math.random()*16777215).toString(16)}`
    }
  })
  
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫:', newBlock)
  await updateDisplay()
})

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
addImageBtn.addEventListener('click', async () => {
  blockCounter++
  
  const newBlock = await blockBuilder.createBlock({
    type: 'image',
    settings: {},
    props: {
      src: `/${['1.jpeg', '2.jpg', '3.png', 'qw.jpg', 'bear.jpg'][(blockCounter - 1) % 5]}`,
      alt: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${blockCounter}`
    }
  })
  
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫:', newBlock)
  await updateDisplay()
})

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
saveBlocksBtn.addEventListener('click', async () => {
  try {
    const blocks = await blockBuilder.getAllBlocks()
    
    // –ü—Ä–∏–º–µ—Ä 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    localStorage.setItem('saved-blocks', JSON.stringify(blocks))
    
    // –ü—Ä–∏–º–µ—Ä 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ API)
    // await fetch('/api/blocks', {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify(blocks)
    // })
    
    console.log('‚úÖ –ë–ª–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', blocks)
    alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–ª–æ–∫–æ–≤: ${blocks.length}`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error)
    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–æ–≤')
  }
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
getAllBlocksBtn.addEventListener('click', async () => {
  const blocks = await blockBuilder.getAllBlocks()
  console.log('üì¶ –í—Å–µ –±–ª–æ–∫–∏:', blocks)
  alert(`–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: ${blocks.length}\n\n–°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π`)
})

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
clearBlocksBtn.addEventListener('click', async () => {
  if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏?')) {
    const blocks = await blockBuilder.getAllBlocks()
    for (const block of blocks) {
      await blockBuilder.deleteBlock(block.id)
    }
    console.log('üóëÔ∏è –í—Å–µ –±–ª–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã')
    await updateDisplay()
  }
})

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ DOM
window.editBlock = async (id) => {
  const block = await blockBuilder.getBlock(id)
  if (!block) {
    alert('–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return
  }
  
  const newContent = prompt('–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', JSON.stringify(block.props, null, 2))
  if (newContent) {
    try {
      const newProps = JSON.parse(newContent)
      await blockBuilder.updateBlock(id, { props: newProps })
      console.log('‚úèÔ∏è –ë–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', id)
      await updateDisplay()
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ' + e.message)
    }
  }
}

window.deleteBlock = async (id) => {
  if (confirm(`–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ ${id}?`)) {
    await blockBuilder.deleteBlock(id)
    console.log('üóëÔ∏è –ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω:', id)
    await updateDisplay()
  }
}

// –ù–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
updateDisplay()

// –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–∏–º –ø–∞—Ä—É –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
setTimeout(async () => {
  const blocks = await blockBuilder.getAllBlocks()
  if (blocks.length === 0) {
    addTextBtn.click()
    setTimeout(() => {
      addImageBtn.click()
    }, 100)
  }
}, 500)

