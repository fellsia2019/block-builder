/**
 * –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Naberika —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */

import { 
  BlockManagementUseCase,
  MemoryBlockRepositoryImpl,
  CreateBlockDto
} from '../index';

// –°–æ–∑–¥–∞–Ω–∏–µ use case (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—Ö–æ–¥ –≤ —è–¥—Ä–æ)
const blockRepository = new MemoryBlockRepositoryImpl();
const blockManagement = new BlockManagementUseCase(blockRepository);

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */
export async function demonstrateCleanArchitecture() {
  console.log('üèóÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Naberika');
  
  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ —á–µ—Ä–µ–∑ Use Case
    const createDto: CreateBlockDto = {
      type: 'text',
      settings: { fontSize: 16, color: '#333' },
      props: { content: 'Hello Clean Architecture!' },
      template: '<div style="font-size: {{ settings.fontSize }}px; color: {{ settings.color }};">{{ props.content }}</div>',
      position: { x: 100, y: 100 },
      size: { width: 300, height: 50 }
    };

    const block = await blockManagement.createBlock(createDto);
    console.log('‚úÖ –ë–ª–æ–∫ —Å–æ–∑–¥–∞–Ω:', block.id);

    // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
    const updatedBlock = await blockManagement.updateBlock(block.id, {
      settings: { fontSize: 24, color: '#ff0000' },
      props: { content: 'Updated content!' }
    });
    console.log('‚úÖ –ë–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedBlock?.id);

    // 3. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞
    const movedBlock = await blockManagement.moveBlock(block.id, { x: 200, y: 200 });
    console.log('‚úÖ –ë–ª–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω:', movedBlock?.position);

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
    const allBlocks = await blockManagement.getAllBlocks();
    console.log('üìã –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤:', allBlocks.length);

    console.log('üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('‚úÖ UI ‚Üí Use Case ‚Üí Port ‚Üí Infrastructure');
    console.log('‚úÖ –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { blockManagement };
