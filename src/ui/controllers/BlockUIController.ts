/**
 * BlockUIController - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç UI –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–ª–æ–∫–∞–º–∏
 * –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω Controller –∏–∑ MVC
 * –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP) + Dependency Inversion Principle (DIP)
 */

import { IBlockDto, ICreateBlockDto, IUpdateBlockDto } from '../../core/types';
import { BlockManagementUseCase } from '../../core/use-cases/BlockManagementUseCase';
import { ApiSelectUseCase } from '../../core/use-cases/ApiSelectUseCase';
import { UIRenderer } from '../services/UIRenderer';
import { FormBuilder, TFieldConfig } from '../services/FormBuilder';
import { ModalManager } from '../services/ModalManager';
import { StyleManager } from '../services/StyleManager';
import { SpacingControlRenderer } from '../services/SpacingControlRenderer';
import { RepeaterControlRenderer } from '../services/RepeaterControlRenderer';
import { ApiSelectControlRenderer } from '../services/ApiSelectControlRenderer';
import { copyToClipboard } from '../../utils/copyToClipboard';
import { UniversalValidator } from '../../utils/universalValidation';
import { addSpacingFieldToFields } from '../../utils/blockSpacingHelpers';
import { scrollToFirstError, parseErrorKey } from '../../utils/formErrorHelpers';

export interface IBlockUIControllerConfig {
  containerId: string;
  blockConfigs: Record<string, any>;
  useCase: BlockManagementUseCase;
  apiSelectUseCase: ApiSelectUseCase;
  onSave?: (blocks: IBlockDto[]) => Promise<boolean> | boolean;
}

export class BlockUIController {
  private config: IBlockUIControllerConfig;
  private uiRenderer: UIRenderer;
  private formBuilder: FormBuilder;
  private modalManager: ModalManager;
  private styleManager: StyleManager;
  private apiSelectUseCase: ApiSelectUseCase;
  private blocks: IBlockDto[] = [];
  private onSave?: (blocks: IBlockDto[]) => Promise<boolean> | boolean;
  private spacingRenderers: Map<string, SpacingControlRenderer> = new Map();
  private repeaterRenderers: Map<string, RepeaterControlRenderer> = new Map();
  private apiSelectRenderers: Map<string, ApiSelectControlRenderer> = new Map();

  constructor(config: IBlockUIControllerConfig) {
    this.config = config;
    this.onSave = config.onSave;
    this.apiSelectUseCase = config.apiSelectUseCase;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (Dependency Injection)
    this.uiRenderer = new UIRenderer({
      containerId: config.containerId,
      blockConfigs: config.blockConfigs,
      componentRegistry: config.useCase.getComponentRegistry()
    });
    this.formBuilder = new FormBuilder();
    this.modalManager = new ModalManager();
    this.styleManager = new StyleManager();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
   */
  async init(): Promise<void> {
    // –ò–Ω—ä–µ–∫—Ü–∏—è —Å—Ç–∏–ª–µ–π
    this.styleManager.injectStyles();

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ UI
    this.uiRenderer.renderContainer();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
    await this.refreshBlocks();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤
   */
  async refreshBlocks(): Promise<void> {
    this.blocks = await this.config.useCase.getAllBlocks();
    this.uiRenderer.renderBlocks(this.blocks);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª–æ–∫–∞
   */
  showBlockTypeSelectionModal(position?: number): void {
    const blockTypesHTML = Object.entries(this.config.blockConfigs)
      .map(([type, config]) => {
        const title = config.title || type;
        const icon = config.icon || 'üì¶';
        return `
          <button
            onclick="blockBuilder.showAddBlockFormAtPosition('${type}', ${position !== undefined ? position : 'undefined'})"
            class="block-builder-block-type-card"
          >
            <span class="block-builder-block-type-card__icon">${icon}</span>
            <span class="block-builder-block-type-card__title">${title}</span>
          </button>
        `;
      })
      .join('');

    const bodyHTML = `
      <div class="block-builder-block-type-selection">
        ${blockTypesHTML}
      </div>
    `;

    this.styleManager.injectStyles();
    this.modalManager.showModal({
      title: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª–æ–∫–∞',
      bodyHTML,
      onSubmit: () => this.modalManager.closeModal(),
      onCancel: () => this.modalManager.closeModal(),
      submitButtonText: '–û—Ç–º–µ–Ω–∞',
      hideSubmitButton: true
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  async showAddBlockFormAtPosition(type: string, position?: number): Promise<void> {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    this.modalManager.closeModal();

    const config = this.config.blockConfigs[type];
    if (!config) {
      this.showError(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–∏–ø–∞ "${type}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º spacing –ø–æ–ª–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const fields: TFieldConfig[] = addSpacingFieldToFields(
      config.fields || [],
      config.spacingOptions
    );

    const formHTML = `
      <form id="block-builder-form" class="block-builder-form">
        ${this.formBuilder.generateCreateFormHTML(fields)}
      </form>
    `;

    this.styleManager.injectStyles();
    this.modalManager.showModal({
      title: `–î–æ–±–∞–≤–∏—Ç—å ${config.title}`,
      bodyHTML: formHTML,
      onSubmit: () => this.handleCreateBlock(type, fields, position),
      onCancel: () => this.closeModalWithCleanup(),
      submitButtonText: '–î–æ–±–∞–≤–∏—Ç—å'
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º spacing, repeater –∏ api-select –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–¥–∞–ª–∫–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –∫–æ–≥–¥–∞ DOM —Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤
    setTimeout(async () => {
      this.initializeSpacingControls();
      this.initializeRepeaterControls();
      await this.initializeApiSelectControls();
    }, 0);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  showAddBlockForm(type: string): void {
    this.showAddBlockFormAtPosition(type);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è spacing –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
   */
  private initializeSpacingControls(): void {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã
    this.cleanupSpacingControls();

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è spacing
    const containers = document.querySelectorAll('.spacing-control-container');

    containers.forEach(container => {
      const config = container.getAttribute('data-spacing-config');
      if (!config) return;

      try {
        const spacingConfig = JSON.parse(config.replace(/&quot;/g, '"'));

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        const renderer = new SpacingControlRenderer({
          fieldName: spacingConfig.field,
          label: spacingConfig.label,
          required: spacingConfig.required,
          config: spacingConfig,
          value: spacingConfig.value || {},
          onChange: (value) => {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
            container.setAttribute('data-spacing-value', JSON.stringify(value));
          }
        });

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–Ω—Ç—Ä–æ–ª
        renderer.render(container as HTMLElement);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        this.spacingRenderers.set(spacingConfig.field, renderer);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ spacing –∫–æ–Ω—Ç—Ä–æ–ª–∞:', error);
      }
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ spacing –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
   */
  private cleanupSpacingControls(): void {
    this.spacingRenderers.forEach(renderer => {
      renderer.destroy();
    });
    this.spacingRenderers.clear();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è repeater –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
   */
  private initializeRepeaterControls(): void {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã
    this.cleanupRepeaterControls();

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è repeater
    const containers = document.querySelectorAll('.repeater-control-container');

    containers.forEach(container => {
      const config = container.getAttribute('data-repeater-config');
      if (!config) return;

      try {
        const repeaterConfig = JSON.parse(config.replace(/&quot;/g, '"'));

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        const renderer = new RepeaterControlRenderer({
          fieldName: repeaterConfig.field,
          label: repeaterConfig.label,
          rules: repeaterConfig.rules || [],
          config: repeaterConfig,
          value: repeaterConfig.value || [],
          onChange: (value) => {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
            container.setAttribute('data-repeater-value', JSON.stringify(value));
          }
        });

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–Ω—Ç—Ä–æ–ª
        renderer.render(container as HTMLElement);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        this.repeaterRenderers.set(repeaterConfig.field, renderer);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ repeater –∫–æ–Ω—Ç—Ä–æ–ª–∞:', error);
      }
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ repeater –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
   */
  private cleanupRepeaterControls(): void {
    this.repeaterRenderers.forEach(renderer => {
      renderer.destroy();
    });
    this.repeaterRenderers.clear();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è api-select –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
   */
  private async initializeApiSelectControls(): Promise<void> {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã
    this.cleanupApiSelectControls();

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è api-select
    const containers = document.querySelectorAll('.api-select-control-container');

    for (const container of Array.from(containers)) {
      const config = container.getAttribute('data-api-select-config');
      if (!config) {
        console.warn('‚ö†Ô∏è API Select: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', container);
        continue;
      }

      try {
        const apiSelectConfig = JSON.parse(config.replace(/&quot;/g, '"'));

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä —Å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º ApiSelectUseCase
        const renderer = new ApiSelectControlRenderer({
          fieldName: apiSelectConfig.field,
          label: apiSelectConfig.label,
          rules: apiSelectConfig.rules || [],
          config: apiSelectConfig,
          value: apiSelectConfig.value || (apiSelectConfig.multiple ? [] : null),
          apiSelectUseCase: this.apiSelectUseCase,
          onChange: (value) => {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
            container.setAttribute('data-api-select-value', JSON.stringify(value));
          }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–Ω—Ç—Ä–æ–ª (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        await renderer.init(container as HTMLElement);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        this.apiSelectRenderers.set(apiSelectConfig.field, renderer);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ api-select –∫–æ–Ω—Ç—Ä–æ–ª–∞:', error);
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ api-select –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
   */
  private cleanupApiSelectControls(): void {
    // –í—ã–∑—ã–≤–∞–µ–º destroy –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    this.apiSelectRenderers.forEach((renderer) => {
      renderer.destroy();
    });
    this.apiSelectRenderers.clear();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Å —É—á–µ—Ç–æ–º spacing, repeater –∏ api-select –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
   */
  private getFormDataWithSpacing(formId: string): Record<string, any> {
    const props = this.modalManager.getFormData(formId);

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ spacing –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
    this.spacingRenderers.forEach((renderer, fieldName) => {
      props[fieldName] = renderer.getValue();
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ repeater –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
    this.repeaterRenderers.forEach((renderer, fieldName) => {
      props[fieldName] = renderer.getValue();
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ api-select –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
    this.apiSelectRenderers.forEach((renderer, fieldName) => {
      props[fieldName] = renderer.getValue();
    });

    return props;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞
   */
  private async handleCreateBlock(type: string, fields: TFieldConfig[], position?: number): Promise<void> {
    const props = this.getFormDataWithSpacing('block-builder-form');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é UniversalValidator
    const validation = UniversalValidator.validateForm(props, fields);
    if (!validation.isValid) {
      this.showValidationErrors(validation.errors);
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–∞
      const blockConfig = this.config.blockConfigs[type];

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
      const createData: ICreateBlockDto = {
        type,
        settings: {},
        props,
        visible: true,
        locked: false
      };

      // –î–æ–±–∞–≤–ª—è–µ–º render –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (blockConfig?.render) {
        createData.render = blockConfig.render;
      }

      // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ use case
      const newBlock = await this.config.useCase.createBlock(createData);

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –±–ª–æ–∫ –Ω–∞ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
      if (position !== undefined && newBlock) {
        await this.insertBlockAtPosition(newBlock.id, position);
      }

      this.modalManager.closeModal();
      await this.refreshBlocks();
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.showError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞: ${errorMessage}`);
    }
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ –±–ª–æ–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
   */
  private async insertBlockAtPosition(blockId: string, position: number): Promise<void> {
    const allBlocks = await this.config.useCase.getAllBlocks();
    const blockIds = allBlocks.map(b => b.id);

    // –£–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ –∏–∑ –∫–æ–Ω—Ü–∞
    const newBlockIndex = blockIds.indexOf(blockId);
    if (newBlockIndex !== -1) {
      blockIds.splice(newBlockIndex, 1);
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    blockIds.splice(position, 0, blockId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    await this.config.useCase.reorderBlocks(blockIds);
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
   */
  async editBlock(blockId: string): Promise<void> {
    const block = this.blocks.find(b => b.id === blockId);
    if (!block) return;

    const config = this.config.blockConfigs[block.type];
    if (!config) {
      this.showError(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–∏–ø–∞ "${block.type}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º spacing –ø–æ–ª–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const fields: TFieldConfig[] = addSpacingFieldToFields(
      config.fields || [],
      config.spacingOptions
    );
    const formHTML = `
      <form id="block-builder-form" class="block-builder-form">
        ${this.formBuilder.generateEditFormHTML(fields, block.props)}
      </form>
    `;

    this.styleManager.injectStyles();
    this.modalManager.showModal({
      title: `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ${config.title}`,
      bodyHTML: formHTML,
      onSubmit: () => this.handleUpdateBlock(blockId, block.type, fields),
      onCancel: () => this.closeModalWithCleanup(),
      submitButtonText: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º spacing, repeater –∏ api-select –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–¥–∞–ª–∫–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –∫–æ–≥–¥–∞ DOM —Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤
    setTimeout(async () => {
      this.initializeSpacingControls();
      this.initializeRepeaterControls();
      await this.initializeApiSelectControls();
    }, 0);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
   */
  private async handleUpdateBlock(blockId: string, type: string, fields: TFieldConfig[]): Promise<void> {
    const props = this.getFormDataWithSpacing('block-builder-form');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é UniversalValidator
    const validation = UniversalValidator.validateForm(props, fields);
    if (!validation.isValid) {
      this.showValidationErrors(validation.errors);
      return;
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ use case
      await this.config.useCase.updateBlock(blockId, { props });

      this.modalManager.closeModal();
      await this.refreshBlocks();
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.showError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞: ${errorMessage}`);
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–ª–æ–∫–∞
   */
  async toggleBlockLock(blockId: string): Promise<void> {
    const block = this.blocks.find(b => b.id === blockId);
    if (!block) return;

    await this.config.useCase.setBlockLocked(blockId, !block.locked);
    await this.refreshBlocks();
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∞
   */
  async toggleBlockVisibility(blockId: string): Promise<void> {
    const block = this.blocks.find(b => b.id === blockId);
    if (!block) return;

    await this.config.useCase.setBlockVisible(blockId, !block.visible);
    await this.refreshBlocks();
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
   */
  async deleteBlockUI(blockId: string): Promise<void> {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫?')) return;

    // –û—á–∏—â–∞–µ–º watcher –¥–ª—è spacing –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    this.uiRenderer.cleanupBlockWatcher(blockId);

    await this.config.useCase.deleteBlock(blockId);
    await this.refreshBlocks();
  }

  /**
   * –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
   */
  async duplicateBlockUI(blockId: string): Promise<void> {
    await this.config.useCase.duplicateBlock(blockId);
    await this.refreshBlocks();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
   */
  async clearAllBlocksUI(): Promise<void> {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏?')) return;

    const allBlocks = await this.config.useCase.getAllBlocks();
    for (const block of allBlocks) {
      await this.config.useCase.deleteBlock(block.id);
    }
    await this.refreshBlocks();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
   */
  async saveAllBlocksUI(): Promise<void> {
    // –ï—Å–ª–∏ –∫–æ–ª–±—ç–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (!this.onSave) {
      this.showNotification('–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ü–µ—Ä–µ–¥–∞–π—Ç–µ onSave –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é BlockBuilder.', 'error');
      return;
    }

    try {
      const blocks = await this.config.useCase.getAllBlocks();
      const result = await Promise.resolve(this.onSave(blocks));

      if (result === true) {
        this.showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
      } else {
        this.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', 'error');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–æ–≤:', error);
      this.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', 'error');
    }
  }

  /**
   * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤–≤–µ—Ä—Ö
   */
  async moveBlockUp(blockId: string): Promise<void> {
    const currentIndex = this.blocks.findIndex(block => block.id === blockId);
    if (currentIndex <= 0) return; // –£–∂–µ –Ω–∞–≤–µ—Ä—Ö—É

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –±–ª–æ–∫–æ–º
    const newBlocks = [...this.blocks];
    [newBlocks[currentIndex], newBlocks[currentIndex - 1]] = [newBlocks[currentIndex - 1], newBlocks[currentIndex]];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    const blockIds = newBlocks.map(block => block.id);
    await this.config.useCase.reorderBlocks(blockIds);

    await this.refreshBlocks();
  }

  /**
   * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤–Ω–∏–∑
   */
  async moveBlockDown(blockId: string): Promise<void> {
    const currentIndex = this.blocks.findIndex(block => block.id === blockId);
    if (currentIndex >= this.blocks.length - 1) return; // –£–∂–µ –≤–Ω–∏–∑—É

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –±–ª–æ–∫–æ–º
    const newBlocks = [...this.blocks];
    [newBlocks[currentIndex], newBlocks[currentIndex + 1]] = [newBlocks[currentIndex + 1], newBlocks[currentIndex]];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    const blockIds = newBlocks.map(block => block.id);
    await this.config.useCase.reorderBlocks(blockIds);

    await this.refreshBlocks();
  }

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –±–ª–æ–∫–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   */
  copyBlockId(blockId: string): void {
    const success = copyToClipboard(blockId);
    if (success) {
      this.showNotification(`ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${blockId}`, 'success');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  private showNotification(message: string, type: 'success' | 'error' | 'info' = 'info'): void {
    const notification = document.createElement('div');
    notification.className = 'block-builder-notification';
    notification.textContent = message;

    const colors = {
      success: '#4caf50',
      error: '#dc3545',
      info: '#007bff'
    };

    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${colors[type]};
      color: white;
      padding: 12px 20px;
      border-radius: 4px;
      z-index: 10000;
      font-size: 14px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
      animation: fadeIn 0.3s ease-in-out;
    `;
    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 12 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      notification.style.animation = 'fadeOut 0.3s ease-in-out';
      setTimeout(() => notification.remove(), 300);
    }, 12000);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–µ
   */
  private showValidationErrors(errors: Record<string, string[]>): void {
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
    this.clearValidationErrors();

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤ repeater –∫–æ–Ω—Ç—Ä–æ–ª–∞—Ö
    this.repeaterRenderers.forEach((renderer) => {
      renderer.updateErrors(errors);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
    Object.entries(errors).forEach(([fieldName, fieldErrors]) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ repeater –ø–æ–ª–µ–π (—Ñ–æ—Ä–º–∞—Ç: "cards[0].title")
      if (fieldName.includes('[') && fieldName.includes(']')) {
        return; // –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ repeater –∫–æ–Ω—Ç—Ä–æ–ª–µ
      }

      const input = document.querySelector(`[name="${fieldName}"]`) as HTMLElement;
      if (input) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –∫ –ø–æ–ª—é
        input.classList.add('error');

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –∫ –≥—Ä—É–ø–ø–µ –ø–æ–ª—è
        const formGroup = input.closest('.block-builder-form-group') as HTMLElement;
        if (formGroup) {
          formGroup.classList.add('error');
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
        const errorContainer = document.createElement('div');
        errorContainer.className = 'block-builder-form-errors';
        errorContainer.setAttribute('data-field', fieldName);

        fieldErrors.forEach(error => {
          const errorSpan = document.createElement('span');
          errorSpan.className = 'error';
          errorSpan.textContent = error;
          errorContainer.appendChild(errorSpan);
        });

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ—Å–ª–µ –ø–æ–ª—è
        input.parentElement?.appendChild(errorContainer);
      }
    });

    // –°–∫—Ä–æ–ª–ª–∏–º –∫ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–∫–∫–æ—Ä–¥–µ–æ–Ω—ã
    this.handleScrollToFirstError(errors);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private clearValidationErrors(): void {
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å error —É –≤—Å–µ—Ö –ø–æ–ª–µ–π
    document.querySelectorAll('.block-builder-form-control.error').forEach(input => {
      input.classList.remove('error');
    });

    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å error —É –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ø–æ–ª–µ–π
    document.querySelectorAll('.block-builder-form-group.error').forEach(group => {
      group.classList.remove('error');
    });

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏
    document.querySelectorAll('.block-builder-form-errors').forEach(container => {
      container.remove();
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –∫ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
   */
  private handleScrollToFirstError(errors: Record<string, string[]>): void {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ —É—Å–ø–µ–ª–∏ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è –≤ DOM
    setTimeout(() => {
      const modalBody = document.querySelector('.block-builder-modal-body') as HTMLElement;

      if (!modalBody) {
        console.warn('[handleScrollToFirstError] –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
      const firstErrorKey = Object.keys(errors)[0];
      if (!firstErrorKey) return;

      const errorInfo = parseErrorKey(firstErrorKey);

      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ repeater - –°–ù–ê–ß–ê–õ–ê –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–∫–∫–æ—Ä–¥–µ–æ–Ω, –ü–û–¢–û–ú —Å–∫—Ä–æ–ª–ª–∏–º
      if (errorInfo.isRepeaterField && errorInfo.repeaterFieldName) {
        this.openRepeaterAccordion(
          errorInfo.repeaterFieldName,
          errorInfo.repeaterIndex || 0
        );
        // –°–∫—Ä–æ–ª–ª –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–Ω—É—Ç—Ä–∏ openRepeaterAccordion –ø–æ—Å–ª–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π —Å–∫—Ä–æ–ª–ª–∏–º —Å—Ä–∞–∑—É
        scrollToFirstError(modalBody, errors, {
          offset: 40,
          behavior: 'smooth',
          autoFocus: true
        });
      }
    }, 100); // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ—à–∏–±–æ–∫
  }

  /**
   * –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –≤ repeater –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  private openRepeaterAccordion(repeaterFieldName: string, itemIndex: number): void {
    // –ü–æ–ª—É—á–∞–µ–º renderer –¥–ª—è —ç—Ç–æ–≥–æ repeater
    const renderer = this.repeaterRenderers.get(repeaterFieldName);

    if (!renderer) {
      console.warn(`[openRepeaterAccordion] –ù–µ –Ω–∞–π–¥–µ–Ω renderer –¥–ª—è repeater: ${repeaterFieldName}`);
      return;
    }

    const modalBody = document.querySelector('.block-builder-modal-body') as HTMLElement;
    if (!modalBody) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–µ—Ä–Ω—É—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
    if (renderer.isItemCollapsed(itemIndex)) {
      console.log('[openRepeaterAccordion] –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –∞–∫–∫–æ—Ä–¥–µ–æ–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:', itemIndex);

      // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
      renderer.expandItem(itemIndex);

      // –ü–æ—Å–ª–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–∫—Ä–æ–ª–ª–∏–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—é
      // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
      setTimeout(() => {
        console.log('[openRepeaterAccordion] –°–∫—Ä–æ–ª–ª –∫ –ø–æ–ª—é –ø–æ—Å–ª–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ - –æ–Ω–∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const allErrors: Record<string, string[]> = {};
        Object.entries(this.repeaterRenderers.get(repeaterFieldName)?.['errors'] || {}).forEach(([key, value]) => {
          allErrors[key] = value;
        });

        // –°–∫—Ä–æ–ª–ª–∏–º –∫ –ø–æ–ª—é —Å –æ—à–∏–±–∫–æ–π
        scrollToFirstError(modalBody, allErrors, {
          offset: 40,
          behavior: 'smooth',
          autoFocus: true
        });
      }, 350); // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    } else {
      console.log('[openRepeaterAccordion] –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç, —Å–∫—Ä–æ–ª–ª–∏–º –∫ –ø–æ–ª—é');

      // –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç - —Å–∫—Ä–æ–ª–ª–∏–º –∫ –ø–æ–ª—é —Å—Ä–∞–∑—É
      scrollToFirstError(modalBody, this.getRepeaterErrors(), {
        offset: 40,
        behavior: 'smooth',
        autoFocus: true
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –∏–∑ repeater –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
   */
  private getRepeaterErrors(): Record<string, string[]> {
    const errors: Record<string, string[]> = {};

    // –ò—â–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤ DOM
    document.querySelectorAll('.repeater-control__field-error').forEach(errorEl => {
      const field = errorEl.closest('.repeater-control__field') as HTMLElement;
      if (field) {
        const input = field.querySelector('input, textarea, select') as HTMLElement;
        if (input) {
          const dataIndex = input.getAttribute('data-item-index');
          const fieldName = input.getAttribute('data-field-name');

          if (dataIndex !== null && fieldName) {
            // –ù–∞—Ö–æ–¥–∏–º –∏–º—è repeater –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ DOM
            const repeaterControl = field.closest('.repeater-control') as HTMLElement;
            if (repeaterControl) {
              const repeaterFieldName = repeaterControl.getAttribute('data-field-name');
              if (repeaterFieldName) {
                const errorKey = `${repeaterFieldName}[${dataIndex}].${fieldName}`;
                errors[errorKey] = [errorEl.textContent || ''];
              }
            }
          }
        }
      }
    });

    return errors;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
   */
  private showError(message: string): void {
    this.showNotification(message, 'error');
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  private closeModalWithCleanup(): void {
    this.clearValidationErrors();
    this.cleanupSpacingControls();
    this.cleanupRepeaterControls();
    this.cleanupApiSelectControls();
    this.modalManager.closeModal();
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  closeModal(): void {
    this.closeModalWithCleanup();
  }

  /**
   * Submit –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  submitModal(): void {
    this.modalManager.submitModal();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  destroy(): void {
    this.cleanupSpacingControls();
    this.styleManager.removeAllStyles();
    this.modalManager.closeModal();
  }
}

