/**
 * BlockUIController - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç UI –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–ª–æ–∫–∞–º–∏
 * –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω Controller –∏–∑ MVC
 * –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP) + Dependency Inversion Principle (DIP)
 */

import { IBlockDto, ICreateBlockDto, IUpdateBlockDto } from '../../core/types';
import { BlockManagementUseCase } from '../../core/use-cases/BlockManagementUseCase';
import { UIRenderer } from '../services/UIRenderer';
import { FormBuilder, IFieldConfig } from '../services/FormBuilder';
import { ModalManager } from '../services/ModalManager';
import { StyleManager } from '../services/StyleManager';
import { copyToClipboard } from '../../utils/copyToClipboard';
import { UniversalValidator } from '../../utils/universalValidation';

export interface IBlockUIControllerConfig {
  containerId: string;
  blockConfigs: Record<string, any>;
  useCase: BlockManagementUseCase;
}

export class BlockUIController {
  private config: IBlockUIControllerConfig;
  private uiRenderer: UIRenderer;
  private formBuilder: FormBuilder;
  private modalManager: ModalManager;
  private styleManager: StyleManager;
  private blocks: IBlockDto[] = [];

  constructor(config: IBlockUIControllerConfig) {
    this.config = config;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (Dependency Injection)
    this.uiRenderer = new UIRenderer({
      containerId: config.containerId,
      blockConfigs: config.blockConfigs,
      componentRegistry: config.useCase.getComponentRegistry()
    });
    this.formBuilder = new FormBuilder();
    this.modalManager = new ModalManager();
    this.styleManager = new StyleManager();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
   */
  async init(): Promise<void> {
    // –ò–Ω—ä–µ–∫—Ü–∏—è —Å—Ç–∏–ª–µ–π
    this.styleManager.injectMainStyles();
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ UI
    this.uiRenderer.renderContainer();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
    await this.refreshBlocks();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤
   */
  async refreshBlocks(): Promise<void> {
    this.blocks = await this.config.useCase.getAllBlocks();
    this.uiRenderer.renderBlocks(this.blocks);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª–æ–∫–∞
   */
  showBlockTypeSelectionModal(position?: number): void {
    const blockTypesHTML = Object.entries(this.config.blockConfigs)
      .map(([type, config]) => {
        const title = config.title || type;
        const icon = config.icon || 'üì¶';
        return `
          <button 
            onclick="blockBuilder.showAddBlockFormAtPosition('${type}', ${position !== undefined ? position : 'undefined'})" 
            class="block-builder-block-type-card"
          >
            <span class="block-builder-block-type-card__icon">${icon}</span>
            <span class="block-builder-block-type-card__title">${title}</span>
          </button>
        `;
      })
      .join('');

    const bodyHTML = `
      <div class="block-builder-block-type-selection">
        ${blockTypesHTML}
      </div>
    `;

    this.styleManager.injectModalStyles();
    this.modalManager.showModal({
      title: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª–æ–∫–∞',
      bodyHTML,
      onSubmit: () => this.modalManager.closeModal(),
      onCancel: () => this.modalManager.closeModal(),
      submitButtonText: '–û—Ç–º–µ–Ω–∞',
      hideSubmitButton: true
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  showAddBlockFormAtPosition(type: string, position?: number): void {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    this.modalManager.closeModal();

    const config = this.config.blockConfigs[type];
    if (!config) {
      this.showError(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–∏–ø–∞ "${type}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    const fields: IFieldConfig[] = config.fields || [];
    const formHTML = `
      <form id="block-builder-form" class="block-builder-form">
        ${this.formBuilder.generateCreateFormHTML(fields)}
      </form>
    `;

    this.styleManager.injectModalStyles();
    this.modalManager.showModal({
      title: `–î–æ–±–∞–≤–∏—Ç—å ${config.title}`,
      bodyHTML: formHTML,
      onSubmit: () => this.handleCreateBlock(type, fields, position),
      onCancel: () => this.closeModalWithCleanup(),
      submitButtonText: '–î–æ–±–∞–≤–∏—Ç—å'
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  showAddBlockForm(type: string): void {
    this.showAddBlockFormAtPosition(type);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞
   */
  private async handleCreateBlock(type: string, fields: IFieldConfig[], position?: number): Promise<void> {
    const props = this.modalManager.getFormData('block-builder-form');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é UniversalValidator
    const validation = UniversalValidator.validateForm(props, fields);
    if (!validation.isValid) {
      this.showValidationErrors(validation.errors);
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–∞
      const blockConfig = this.config.blockConfigs[type];
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
      const createData: ICreateBlockDto = {
        type,
        settings: {},
        props,
        visible: true,
        locked: false
      };

      // –î–æ–±–∞–≤–ª—è–µ–º render –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (blockConfig?.render) {
        createData.render = blockConfig.render;
      }

      // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ use case
      const newBlock = await this.config.useCase.createBlock(createData);

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –±–ª–æ–∫ –Ω–∞ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
      if (position !== undefined && newBlock) {
        await this.insertBlockAtPosition(newBlock.id, position);
      }

      this.modalManager.closeModal();
      await this.refreshBlocks();
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.showError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞: ${errorMessage}`);
    }
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ –±–ª–æ–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
   */
  private async insertBlockAtPosition(blockId: string, position: number): Promise<void> {
    const allBlocks = await this.config.useCase.getAllBlocks();
    const blockIds = allBlocks.map(b => b.id);
    
    // –£–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ –∏–∑ –∫–æ–Ω—Ü–∞
    const newBlockIndex = blockIds.indexOf(blockId);
    if (newBlockIndex !== -1) {
      blockIds.splice(newBlockIndex, 1);
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    blockIds.splice(position, 0, blockId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    await this.config.useCase.reorderBlocks(blockIds);
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
   */
  editBlock(blockId: string): void {
    const block = this.blocks.find(b => b.id === blockId);
    if (!block) return;

    const config = this.config.blockConfigs[block.type];
    if (!config) {
      this.showError(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–∏–ø–∞ "${block.type}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    const fields: IFieldConfig[] = config.fields || [];
    const formHTML = `
      <form id="block-builder-form" class="block-builder-form">
        ${this.formBuilder.generateEditFormHTML(fields, block.props)}
      </form>
    `;

    this.styleManager.injectModalStyles();
    this.modalManager.showModal({
      title: `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ${config.title}`,
      bodyHTML: formHTML,
      onSubmit: () => this.handleUpdateBlock(blockId, block.type, fields),
      onCancel: () => this.closeModalWithCleanup(),
      submitButtonText: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
   */
  private async handleUpdateBlock(blockId: string, type: string, fields: IFieldConfig[]): Promise<void> {
    const props = this.modalManager.getFormData('block-builder-form');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é UniversalValidator
    const validation = UniversalValidator.validateForm(props, fields);
    if (!validation.isValid) {
      this.showValidationErrors(validation.errors);
      return;
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ use case
      await this.config.useCase.updateBlock(blockId, { props });

      this.modalManager.closeModal();
      await this.refreshBlocks();
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      this.showError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞: ${errorMessage}`);
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–ª–æ–∫–∞
   */
  async toggleBlockLock(blockId: string): Promise<void> {
    const block = this.blocks.find(b => b.id === blockId);
    if (!block) return;

    await this.config.useCase.setBlockLocked(blockId, !block.locked);
    await this.refreshBlocks();
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∞
   */
  async toggleBlockVisibility(blockId: string): Promise<void> {
    const block = this.blocks.find(b => b.id === blockId);
    if (!block) return;

    await this.config.useCase.setBlockVisible(blockId, !block.visible);
    await this.refreshBlocks();
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
   */
  async deleteBlockUI(blockId: string): Promise<void> {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫?')) return;

    await this.config.useCase.deleteBlock(blockId);
    await this.refreshBlocks();
  }

  /**
   * –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
   */
  async duplicateBlockUI(blockId: string): Promise<void> {
    await this.config.useCase.duplicateBlock(blockId);
    await this.refreshBlocks();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
   */
  async clearAllBlocksUI(): Promise<void> {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏?')) return;

    const allBlocks = await this.config.useCase.getAllBlocks();
    for (const block of allBlocks) {
      await this.config.useCase.deleteBlock(block.id);
    }
    await this.refreshBlocks();
  }

  /**
   * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤–≤–µ—Ä—Ö
   */
  async moveBlockUp(blockId: string): Promise<void> {
    const currentIndex = this.blocks.findIndex(block => block.id === blockId);
    if (currentIndex <= 0) return; // –£–∂–µ –Ω–∞–≤–µ—Ä—Ö—É

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –±–ª–æ–∫–æ–º
    const newBlocks = [...this.blocks];
    [newBlocks[currentIndex], newBlocks[currentIndex - 1]] = [newBlocks[currentIndex - 1], newBlocks[currentIndex]];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    const blockIds = newBlocks.map(block => block.id);
    await this.config.useCase.reorderBlocks(blockIds);

    await this.refreshBlocks();
  }

  /**
   * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤–Ω–∏–∑
   */
  async moveBlockDown(blockId: string): Promise<void> {
    const currentIndex = this.blocks.findIndex(block => block.id === blockId);
    if (currentIndex >= this.blocks.length - 1) return; // –£–∂–µ –≤–Ω–∏–∑—É

    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –±–ª–æ–∫–æ–º
    const newBlocks = [...this.blocks];
    [newBlocks[currentIndex], newBlocks[currentIndex + 1]] = [newBlocks[currentIndex + 1], newBlocks[currentIndex]];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    const blockIds = newBlocks.map(block => block.id);
    await this.config.useCase.reorderBlocks(blockIds);

    await this.refreshBlocks();
  }

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –±–ª–æ–∫–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   */
  copyBlockId(blockId: string): void {
    const success = copyToClipboard(blockId);
    if (success) {
      this.showNotification(`ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${blockId}`, 'success');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  private showNotification(message: string, type: 'success' | 'error' | 'info' = 'info'): void {
    const notification = document.createElement('div');
    notification.className = 'block-builder-notification';
    notification.textContent = message;
    
    const colors = {
      success: '#4caf50',
      error: '#dc3545',
      info: '#007bff'
    };
    
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${colors[type]};
      color: white;
      padding: 12px 20px;
      border-radius: 4px;
      z-index: 10000;
      font-size: 14px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
      animation: fadeIn 0.3s ease-in-out;
    `;
    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      notification.style.animation = 'fadeOut 0.3s ease-in-out';
      setTimeout(() => notification.remove(), 300);
    }, 2000);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–µ
   */
  private showValidationErrors(errors: Record<string, string[]>): void {
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
    this.clearValidationErrors();

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏
    Object.entries(errors).forEach(([fieldName, fieldErrors]) => {
      const input = document.querySelector(`[name="${fieldName}"]`) as HTMLElement;
      if (input) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –∫ –ø–æ–ª—é
        input.classList.add('error');

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
        const errorContainer = document.createElement('div');
        errorContainer.className = 'block-builder-form-errors';
        errorContainer.setAttribute('data-field', fieldName);

        fieldErrors.forEach(error => {
          const errorSpan = document.createElement('span');
          errorSpan.className = 'error';
          errorSpan.textContent = error;
          errorContainer.appendChild(errorSpan);
        });

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ—Å–ª–µ –ø–æ–ª—è
        input.parentElement?.appendChild(errorContainer);
      }
    });
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private clearValidationErrors(): void {
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å error —É –≤—Å–µ—Ö –ø–æ–ª–µ–π
    document.querySelectorAll('.block-builder-form-control.error').forEach(input => {
      input.classList.remove('error');
    });

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏
    document.querySelectorAll('.block-builder-form-errors').forEach(container => {
      container.remove();
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
   */
  private showError(message: string): void {
    this.showNotification(message, 'error');
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  private closeModalWithCleanup(): void {
    this.clearValidationErrors();
    this.modalManager.closeModal();
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  closeModal(): void {
    this.closeModalWithCleanup();
  }

  /**
   * Submit –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  submitModal(): void {
    this.modalManager.submitModal();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  destroy(): void {
    this.styleManager.removeAllStyles();
    this.modalManager.closeModal();
  }
}

