/**
 * UIRenderer - –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ UI
 * –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP)
 */

import { IBlockDto } from '../../core/types';

export interface IUIRendererConfig {
  containerId: string;
  blockConfigs: Record<string, any>;
  componentRegistry: any;
}

export class UIRenderer {
  private config: IUIRendererConfig;

  constructor(config: IUIRendererConfig) {
    this.config = config;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ UI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  renderContainer(): void {
    const container = document.getElementById(this.config.containerId);
    if (!container) {
      console.warn(`Container with id "${this.config.containerId}" not found`);
      return;
    }

    container.innerHTML = `
      <div class="block-builder-app">
        <div class="block-builder-controls">
          ${this.renderControlButtons()}
        </div>
        <div class="block-builder-stats">
          <p>–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: <span id="blocks-count">0</span></p>
        </div>
        <div class="block-builder-blocks" id="block-builder-blocks"></div>
      </div>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  private renderControlButtons(): string {
    return Object.keys(this.config.blockConfigs).map(type => {
      const config = this.config.blockConfigs[type];
      return `
        <button onclick="blockBuilder.showAddBlockForm('${type}')" class="block-builder-btn block-builder-btn-primary">
          üìù –î–æ–±–∞–≤–∏—Ç—å ${config.title}
        </button>
      `;
    }).join('') + `
      <button onclick="blockBuilder.clearAllBlocksUI()" class="block-builder-btn block-builder-btn-danger">
        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
      </button>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤
   */
  renderBlocks(blocks: IBlockDto[]): void {
    const blocksContainer = document.getElementById('block-builder-blocks');
    const countElement = document.getElementById('blocks-count');

    if (!blocksContainer || !countElement) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    countElement.textContent = blocks.length.toString();

    if (blocks.length === 0) {
      blocksContainer.innerHTML = '<p style="text-align: center; color: #666; padding: 40px;">–ë–ª–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫!</p>';
      return;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º –±–ª–æ–∫–∏
    blocksContainer.innerHTML = blocks.map(block => this.renderBlock(block)).join('');
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞
   */
  private renderBlock(block: IBlockDto): string {
    const config = this.config.blockConfigs[block.type];
    if (!config) return '';

    const blockContent = this.renderBlockContent(block, config);

    return `
      <div class="block-builder-block ${block.locked ? 'locked' : ''} ${!block.visible ? 'hidden' : ''}" data-block-id="${block.id}">
        <div class="block-builder-block-header">
          <div class="block-builder-block-info">
            <span>üì¶ ${config.title}</span>
            <small>ID: ${block.id}</small>
            ${block.locked ? '<span class="locked-indicator">üîí</span>' : ''}
            ${!block.visible ? '<span class="hidden-indicator">üëÅÔ∏è‚Äçüó®Ô∏è</span>' : ''}
          </div>
          <div class="block-builder-block-controls">
            ${this.renderBlockControls(block)}
          </div>
        </div>
        <div class="block-builder-block-content">
          ${blockContent}
        </div>
      </div>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
   */
  private renderBlockControls(block: IBlockDto): string {
    return `
      <button onclick="blockBuilder.moveBlockUp('${block.id}')" class="block-builder-control-btn" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö">‚¨ÜÔ∏è</button>
      <button onclick="blockBuilder.moveBlockDown('${block.id}')" class="block-builder-control-btn" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑">‚¨áÔ∏è</button>
      <button onclick="blockBuilder.editBlock('${block.id}')" class="block-builder-control-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
      <button onclick="blockBuilder.duplicateBlockUI('${block.id}')" class="block-builder-control-btn" title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">üìã</button>
      <button onclick="blockBuilder.toggleBlockLock('${block.id}')" class="block-builder-control-btn" title="${block.locked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}">${block.locked ? 'üîì' : 'üîí'}</button>
      <button onclick="blockBuilder.toggleBlockVisibility('${block.id}')" class="block-builder-control-btn" title="${block.visible ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}">${block.visible ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}</button>
      <button onclick="blockBuilder.deleteBlockUI('${block.id}')" class="block-builder-control-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–ª–æ–∫–∞
   */
  private renderBlockContent(block: IBlockDto, config: any): string {
    // –ï—Å–ª–∏ –µ—Å—Ç—å Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (config.render?.kind === 'component' && config.render?.component) {
      return this.renderVueComponent(block, config);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å HTML —à–∞–±–ª–æ–Ω
    if (config.template && typeof config.template === 'function') {
      return config.template(block.props);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å render.template
    if (config.render?.kind === 'html' && config.render?.template) {
      return config.render.template(block.props);
    }

    // Fallback - –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return `
      <div class="block-content-fallback">
        <strong>${config.title}</strong>
        <pre>${JSON.stringify(block.props, null, 2)}</pre>
      </div>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  private renderVueComponent(block: IBlockDto, config: any): string {
    const componentId = `vue-component-${block.id}`;
    const componentName = config.render.component.name;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const containerHTML = `
      <div id="${componentId}" class="vue-component-container">
        <!-- Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±—É–¥–µ—Ç –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∑–¥–µ—Å—å -->
      </div>
    `;

    // –ú–æ–Ω—Ç–∏—Ä—É–µ–º Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    setTimeout(() => {
      this.mountVueComponent(componentId, componentName, block.props);
    }, 0);

    return containerHTML;
  }

  /**
   * –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  private mountVueComponent(containerId: string, componentName: string, props: Record<string, any>): void {
    const container = document.getElementById(containerId);
    if (!container) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Vue –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof (window as any).Vue === 'undefined') {
      container.innerHTML = `<div class="vue-error">Vue –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Vue –∑–∞–≥—Ä—É–∂–µ–Ω.</div>`;
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    const component = this.config.componentRegistry.get(componentName);
    if (!component) {
      container.innerHTML = `<div class="vue-error">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${componentName} –Ω–µ –Ω–∞–π–¥–µ–Ω</div>`;
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
      const app = (window as any).Vue.createApp({
        components: {
          [componentName]: component
        },
        template: `<${componentName} v-bind="props" />`,
        data() {
          return {
            props: props
          };
        }
      });

      // –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      app.mount(container);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      container.innerHTML = `<div class="vue-error">–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${errorMessage}</div>`;
    }
  }
}

