/**
 * UIRenderer - –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ UI
 * –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP)
 */

import { IBlockDto } from '../../core/types';
import { getBlockInlineStyles, watchBreakpointChanges } from '../../utils/breakpointHelpers';
import { ISpacingData } from '../../utils/spacingHelpers';

export interface IUIRendererConfig {
  containerId: string;
  blockConfigs: Record<string, any>;
  componentRegistry: any;
}

export class UIRenderer {
  private config: IUIRendererConfig;
  private breakpointUnsubscribers: Map<string, () => void> = new Map();

  constructor(config: IUIRendererConfig) {
    this.config = config;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ props –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–±–µ–∑ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ spacing)
   */
  private getUserComponentProps(props: Record<string, any>): Record<string, any> {
    if (!props) return {};
    
    // –ò—Å–∫–ª—é—á–∞–µ–º spacing - —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è BlockBuilder
    const { spacing, ...userProps } = props;
    
    return userProps;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ UI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  renderContainer(): void {
    const container = document.getElementById(this.config.containerId);
    if (!container) {
      console.warn(`Container with id "${this.config.containerId}" not found`);
      return;
    }

    container.innerHTML = `
      <div class="block-builder-app">
        <div class="block-builder-controls">
          ${this.renderControlButtons()}
        </div>
        <div class="block-builder-stats">
          <p>–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: <span id="blocks-count">0</span></p>
        </div>
        <div class="block-builder-blocks" id="block-builder-blocks"></div>
      </div>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  private renderControlButtons(): string {
    return `
      <button onclick="blockBuilder.saveAllBlocksUI()" class="block-builder-btn block-builder-btn--success">
        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </button>
      <button onclick="blockBuilder.clearAllBlocksUI()" class="block-builder-btn block-builder-btn--danger">
        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
      </button>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
   */
  private renderAddBlockButton(position: number): string {
    return `
      <div class="block-builder-add-block-separator">
        <button 
          onclick="blockBuilder.showBlockTypeSelectionModal(${position})" 
          class="block-builder-add-block-btn"
          title="–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫"
        >
          <span class="block-builder-add-block-btn__icon">+</span>
          <span class="block-builder-add-block-btn__text">–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫</span>
        </button>
      </div>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤
   */
  renderBlocks(blocks: IBlockDto[]): void {
    const blocksContainer = document.getElementById('block-builder-blocks');
    const countElement = document.getElementById('blocks-count');

    if (!blocksContainer || !countElement) return;

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ watchers –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–º
    this.cleanupBreakpointWatchers();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    countElement.textContent = blocks.length.toString();

    if (blocks.length === 0) {
      // –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      blocksContainer.innerHTML = `
        <div class="block-builder-empty-state">
          ${this.renderAddBlockButton(0)}
        </div>
      `;
      return;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º –±–ª–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏
    const blocksHTML: string[] = [];
    
    // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º
    blocksHTML.push(this.renderAddBlockButton(0));
    
    // –ë–ª–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ
    blocks.forEach((block, index) => {
      blocksHTML.push(this.renderBlock(block));
      blocksHTML.push(this.renderAddBlockButton(index + 1));
    });

    blocksContainer.innerHTML = blocksHTML.join('');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º custom –±–ª–æ–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    setTimeout(() => {
      this.initializeCustomBlocks(blocks);
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º watchers –¥–ª—è spacing –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ DOM
      this.setupBreakpointWatchers(blocks);
    }, 0);
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞
   */
  private renderBlock(block: IBlockDto): string {
    const config = this.config.blockConfigs[block.type];
    if (!config) return '';

    const blockContent = this.renderBlockContent(block, config);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º spacing —Å—Ç–∏–ª–∏ –∏–∑ props.spacing
    // margin - –Ω–∞–ø—Ä—è–º—É—é, padding - —á–µ—Ä–µ–∑ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const spacingStylesObj = getBlockInlineStyles(block.props.spacing || {}, 'spacing');
    const styleAttr = Object.keys(spacingStylesObj).length > 0 
      ? ` style="${this.objectToStyleString(spacingStylesObj)}"` 
      : '';

    return `
      <div class="block-builder-block ${block.locked ? 'locked' : ''} ${!block.visible ? 'hidden' : ''}" data-block-id="${block.id}"${styleAttr}>
        <div class="block-builder-block-header">
          <div class="block-builder-block-info">
            <span>üì¶ ${config.title}</span>
            <small class="block-builder-block-id">
              ID: ${block.id}
              <button 
                onclick="blockBuilder.copyBlockId('${block.id}')" 
                class="block-builder-copy-id-btn" 
                title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID"
              >üìã</button>
            </small>
            ${block.locked ? '<span class="locked-indicator">üîí</span>' : ''}
            ${!block.visible ? '<span class="hidden-indicator">üëÅÔ∏è‚Äçüó®Ô∏è</span>' : ''}
          </div>
          <div class="block-builder-block-controls">
            ${this.renderBlockControls(block)}
          </div>
        </div>
        <div class="block-builder-block-content">
          ${blockContent}
        </div>
      </div>
    `;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç–∏–ª–µ–π –≤ —Å—Ç—Ä–æ–∫—É
   */
  private objectToStyleString(styles: Record<string, string>): string {
    return Object.entries(styles)
      .map(([key, value]) => {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º camelCase –≤ kebab-case –¥–ª—è CSS —Å–≤–æ–π—Å—Ç–≤
        const cssKey = key.replace(/([A-Z])/g, '-$1').toLowerCase();
        return `${cssKey}: ${value}`;
      })
      .join('; ');
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
   */
  private renderBlockControls(block: IBlockDto): string {
    return `
      <button onclick="blockBuilder.moveBlockUp('${block.id}')" class="block-builder-control-btn" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö">‚¨ÜÔ∏è</button>
      <button onclick="blockBuilder.moveBlockDown('${block.id}')" class="block-builder-control-btn" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑">‚¨áÔ∏è</button>
      <button onclick="blockBuilder.editBlock('${block.id}')" class="block-builder-control-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
      <button onclick="blockBuilder.duplicateBlockUI('${block.id}')" class="block-builder-control-btn" title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">üìã</button>
      <button onclick="blockBuilder.toggleBlockLock('${block.id}')" class="block-builder-control-btn" title="${block.locked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}">${block.locked ? 'üîì' : 'üîí'}</button>
      <button onclick="blockBuilder.toggleBlockVisibility('${block.id}')" class="block-builder-control-btn" title="${block.visible ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}">${block.visible ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}</button>
      <button onclick="blockBuilder.deleteBlockUI('${block.id}')" class="block-builder-control-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–ª–æ–∫–∞
   */
  private renderBlockContent(block: IBlockDto, config: any): string {
    // –ü–æ–ª—É—á–∞–µ–º props –±–µ–∑ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ spacing
    const userProps = this.getUserComponentProps(block.props);

    // –ï—Å–ª–∏ –µ—Å—Ç—å custom render —Å —Ñ—É–Ω–∫—Ü–∏–µ–π mount
    if (config.render?.kind === 'custom' && config.render?.mount) {
      return this.renderCustomBlock(block);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (config.render?.kind === 'component' && config.render?.component) {
      return this.renderVueComponent(block, config);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å HTML —à–∞–±–ª–æ–Ω –≤ render
    if (config.render?.kind === 'html' && config.render?.template) {
      const template = config.render.template;
      return typeof template === 'function' ? template(userProps) : template;
    }

    // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç template
    if (config.template) {
      return typeof config.template === 'function' ? config.template(userProps) : config.template;
    }

    // Fallback - –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return `
      <div class="block-content-fallback">
        <strong>${config.title}</strong>
        <pre>${JSON.stringify(userProps, null, 2)}</pre>
      </div>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  private renderVueComponent(block: IBlockDto, config: any): string {
    const componentId = `vue-component-${block.id}`;
    const componentName = config.render.component.name;
    const userProps = this.getUserComponentProps(block.props);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const containerHTML = `
      <div id="${componentId}" class="vue-component-container">
        <!-- Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±—É–¥–µ—Ç –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∑–¥–µ—Å—å -->
      </div>
    `;

    // –ú–æ–Ω—Ç–∏—Ä—É–µ–º Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    setTimeout(() => {
      this.mountVueComponent(componentId, componentName, userProps);
    }, 0);

    return containerHTML;
  }

  /**
   * –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  private mountVueComponent(containerId: string, componentName: string, props: Record<string, any>): void {
    const container = document.getElementById(containerId);
    if (!container) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Vue –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof (window as any).Vue === 'undefined') {
      container.innerHTML = `<div class="vue-error">Vue –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Vue –∑–∞–≥—Ä—É–∂–µ–Ω.</div>`;
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    const component = this.config.componentRegistry.get(componentName);
    if (!component) {
      container.innerHTML = `<div class="vue-error">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${componentName} –Ω–µ –Ω–∞–π–¥–µ–Ω</div>`;
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
      const app = (window as any).Vue.createApp({
        components: {
          [componentName]: component
        },
        template: `<${componentName} v-bind="props" />`,
        data() {
          return {
            props: props
          };
        }
      });

      // –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      app.mount(container);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      container.innerHTML = `<div class="vue-error">–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${errorMessage}</div>`;
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ custom –±–ª–æ–∫–∞ (—Å –∏–º–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π mount)
   */
  private renderCustomBlock(block: IBlockDto): string {
    const containerId = `custom-block-${block.id}`;
    return `<div id="${containerId}" class="custom-block-container" data-block-id="${block.id}"></div>`;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è custom –±–ª–æ–∫–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  private initializeCustomBlocks(blocks: IBlockDto[]): void {
    blocks.forEach(block => {
      const config = this.config.blockConfigs[block.type];
      if (config?.render?.kind === 'custom' && config.render.mount) {
        const containerId = `custom-block-${block.id}`;
        const container = document.getElementById(containerId);
        
        if (container && !container.hasAttribute('data-custom-mounted')) {
          try {
            // –ü–æ–ª—É—á–∞–µ–º props –±–µ–∑ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ spacing
            const userProps = this.getUserComponentProps(block.props);
            
            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é mount —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –∏ –ø—Ä–æ–ø—Å–∞–º–∏
            config.render.mount(container, userProps);
            container.setAttribute('data-custom-mounted', 'true');
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è custom –±–ª–æ–∫–∞ ${block.id}:`, error);
            const errorMessage = error instanceof Error ? error.message : String(error);
            container.innerHTML = `<div style="color: red; padding: 10px; border: 1px solid red; border-radius: 4px;">
              <strong>‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:</strong><br>${errorMessage}
            </div>`;
          }
        }
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ watchers –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±—Ä–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è spacing
   */
  private setupBreakpointWatchers(blocks: IBlockDto[]): void {
    blocks.forEach(block => {
      const spacing = block.props?.spacing as ISpacingData | undefined;
      
      if (!spacing || Object.keys(spacing).length === 0) {
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º DOM —ç–ª–µ–º–µ–Ω—Ç –±–ª–æ–∫–∞
      const element = document.querySelector(`[data-block-id="${block.id}"]`) as HTMLElement;
      
      if (!element) {
        return;
      }

      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ watcher, –µ—Å–ª–∏ –µ—Å—Ç—å
      const oldUnsubscribe = this.breakpointUnsubscribers.get(block.id);
      if (oldUnsubscribe) {
        oldUnsubscribe();
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –±–ª–æ–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è breakpoints
      const blockConfig = this.config.blockConfigs[block.type];
      const breakpoints = blockConfig?.spacingOptions?.config?.breakpoints;

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π watcher
      const unsubscribe = watchBreakpointChanges(element, spacing, 'spacing', breakpoints);
      this.breakpointUnsubscribers.set(block.id, unsubscribe);
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö watchers
   */
  private cleanupBreakpointWatchers(): void {
    this.breakpointUnsubscribers.forEach(unsubscribe => unsubscribe());
    this.breakpointUnsubscribers.clear();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ watcher –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞
   */
  cleanupBlockWatcher(blockId: string): void {
    const unsubscribe = this.breakpointUnsubscribers.get(blockId);
    if (unsubscribe) {
      unsubscribe();
      this.breakpointUnsubscribers.delete(blockId);
    }
  }
}


