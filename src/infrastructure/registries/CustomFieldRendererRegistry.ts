/**
 * CustomFieldRendererRegistry - —Ä–µ–µ—Å—Ç—Ä –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤ –ø–æ–ª–µ–π
 * Infrastructure —Å–ª–æ–π - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ICustomFieldRendererRegistry
 * –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP)
 */

import { ICustomFieldRenderer, ICustomFieldRendererRegistry } from '../../core/ports/CustomFieldRenderer';

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤ –ø–æ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
 */
export class CustomFieldRendererRegistry implements ICustomFieldRendererRegistry {
  private renderers: Map<string, ICustomFieldRenderer> = new Map();

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
   */
  register(renderer: ICustomFieldRenderer): void {
    if (!renderer.id) {
      throw new Error('Renderer ID is required');
    }

    if (this.renderers.has(renderer.id)) {
      console.warn(`‚ö†Ô∏è Renderer with ID "${renderer.id}" already exists. It will be overwritten.`);
    }

    this.renderers.set(renderer.id, renderer);
    console.log(`‚úÖ Custom field renderer "${renderer.name}" (${renderer.id}) registered`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ –ø–æ ID
   */
  get(id: string): ICustomFieldRenderer | null {
    return this.renderers.get(id) || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
   */
  has(id: string): boolean {
    return this.renderers.has(id);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
   */
  unregister(id: string): boolean {
    const existed = this.renderers.has(id);
    this.renderers.delete(id);
    
    if (existed) {
      console.log(`üóëÔ∏è Custom field renderer "${id}" unregistered`);
    }
    
    return existed;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤
   */
  getAll(): Map<string, ICustomFieldRenderer> {
    return new Map(this.renderers);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤
   */
  clear(): void {
    this.renderers.clear();
    console.log('üóëÔ∏è All custom field renderers cleared');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤
   */
  count(): number {
    return this.renderers.size;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –≤—Å–µ—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤
   */
  getIds(): string[] {
    return Array.from(this.renderers.keys());
  }
}

